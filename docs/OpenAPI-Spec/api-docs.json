{
  "openapi": "3.0.1",
  "info": {
    "title": "Party Type Backend API",
    "description": "API Endpoints for Party Time Backend",
    "version": "1.0.0"
  },
  "servers": [
    { "url": "http://localhost:8090", "description": "Generated server url" }
  ],
  "security": [{ "Authorization": [] }],
  "tags": [
    {
      "name": "Event Host API",
      "description": "API endpoints providing all required logic for events"
    },
    {
      "name": "Event Participants API",
      "description": "API endpoints providing all required logic for event participants"
    },
    {
      "name": "Account API",
      "description": "API Endpoints providing all required logic for an Account"
    },
    {
      "name": "Authentication API",
      "description": "API endpoints providing all required logic for authentication"
    }
  ],
  "paths": {
    "/api/event": {
      "get": {
        "tags": ["Event Host API"],
        "description": "Get events wherever the authenticated user is host ",
        "operationId": "getEvents",
        "responses": {
          "200": {
            "description": "Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EventDTO" }
                }
              }
            }
          },
          "4XX": {
            "description": "Operation failed with Client Error!",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "5XX": {
            "description": "Operation failed with Server Error!",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Event Host API"],
        "description": "Update own event if authenticated user is host",
        "operationId": "updateEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EventDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event successfully updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventDTO" }
              }
            }
          },
          "400": {
            "description": "Event update failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Not organizer",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event Host API"],
        "description": "Create an event as  authenticated user",
        "operationId": "createEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EventCreateDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event successfully created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventDTO" }
              }
            }
          },
          "400": {
            "description": "Event creation failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/{id}/participants/{email}": {
      "post": {
        "tags": ["Event Host API"],
        "description": "Invite account to own event",
        "operationId": "inviteParticipant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "email",
            "in": "path",
            "description": "The e-mail of the guest to invite",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation e-mail sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ParticipantDTO" }
                }
              }
            }
          },
          "400": {
            "description": "Invitation failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Not organizer",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event Host API"],
        "description": "Cancel invitation of account to own event",
        "operationId": "uninviteParticipant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "email",
            "in": "path",
            "description": "The e-mail of the guest to invite",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Account uninvited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ParticipantDTO" }
                }
              }
            }
          },
          "400": {
            "description": "Uninvite failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Not organizer",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/participants/{event}/invitation/decline": {
      "post": {
        "tags": ["Event Participants API"],
        "description": "Decline invitation for an event",
        "operationId": "declineInvitation",
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": { "description": "Event invitation declined" },
          "400": {
            "description": "Invitation decline failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Not invited",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/participants/{event}/invitation/accept": {
      "post": {
        "tags": ["Event Participants API"],
        "description": "Accept invitation for an event",
        "operationId": "acceptInvitation",
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": { "description": "Event invitation accepted" },
          "400": {
            "description": "Invitation accept failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Not invited",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify/{code}": {
      "post": {
        "tags": ["Authentication API"],
        "description": "Verify the e-mail of an account",
        "operationId": "verifyMail",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification success. User account is active now!"
          },
          "400": {
            "description": "Account verification failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication API"],
        "description": "Register a new account",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccountRegisterDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The account object of the newly created account",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountDTO" }
              }
            }
          },
          "400": {
            "description": "Account with e-mail already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication API"],
        "description": "Login an account",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequestDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponseDTO" }
              }
            }
          },
          "401": {
            "description": "Login failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Account not verified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Account doesn't exist",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/change": {
      "post": {
        "tags": ["Authentication API"],
        "description": "Change the password of an account",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangePasswordDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Password change success" },
          "401": {
            "description": "The old password is wrong",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "409": {
            "description": "New password does not match requirements",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/{id}": {
      "get": {
        "tags": ["Event Host API"],
        "description": "Get event by id if the authenticated user is host ",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventDTO" }
              }
            }
          },
          "403": {
            "description": "Not organizer",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event Host API"],
        "description": "Delete own event if authenticated user  is host",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": { "description": "Event successfully created" },
          "400": {
            "description": "Event deletion failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "403": {
            "description": "Not organizer",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/{id}/participants": {
      "get": {
        "tags": ["Event Host API"],
        "description": "Get participants of given event if the authenticated user is host ",
        "operationId": "getParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ParticipantDTO" }
                }
              }
            }
          },
          "403": {
            "description": "Not organizer",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/participants": {
      "get": {
        "tags": ["Event Participants API"],
        "description": "Get all participating events",
        "operationId": "getEvents_1",
        "responses": {
          "200": {
            "description": "Event data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipatingEventDTO"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Operation failed with Client Error!",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          },
          "5XX": {
            "description": "Operation failed with Server Error!",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/event/participants/{event}": {
      "get": {
        "tags": ["Event Participants API"],
        "description": "Get a single participating event",
        "operationId": "getEvent_1",
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Event data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipatingEventDTO"
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    },
    "/api/account/delete": {
      "delete": {
        "tags": ["Account API"],
        "description": "Deletes the Account of the Logged In User",
        "operationId": "deleteOwnAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccountDeleteDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Account deleted with success" },
          "401": {
            "description": "The Old Password is Wrong",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountDTO": {
        "required": ["email", "id", "name"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "emailVerified": { "type": "boolean" }
        }
      },
      "AddressDTO": {
        "required": ["city", "country", "zip"],
        "type": "object",
        "properties": {
          "addressLine": { "maxLength": 25, "minLength": 4, "type": "string" },
          "addressLineAddition": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string"
          },
          "zip": { "type": "string" },
          "city": { "maxLength": 20, "minLength": 3, "type": "string" },
          "country": { "maxLength": 20, "minLength": 3, "type": "string" }
        }
      },
      "EventDTO": {
        "required": ["address", "dateTime", "id", "name", "organizer"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "maxLength": 20, "minLength": 5, "type": "string" },
          "organizer": { "$ref": "#/components/schemas/AccountDTO" },
          "dateTime": { "type": "string", "format": "date-time" },
          "address": { "$ref": "#/components/schemas/AddressDTO" },
          "participants": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ParticipantDTO" }
          }
        }
      },
      "ParticipantDTO": {
        "type": "object",
        "properties": {
          "account": { "$ref": "#/components/schemas/AccountDTO" },
          "status": { "$ref": "#/components/schemas/Status" }
        }
      },
      "Status": {
        "type": "string",
        "enum": ["INVITED", "PARTICIPATING", "REJECTED"]
      },
      "EventCreateDTO": {
        "required": ["address", "dateTime", "name"],
        "type": "object",
        "properties": {
          "name": { "maxLength": 20, "minLength": 5, "type": "string" },
          "dateTime": { "type": "string", "format": "date-time" },
          "address": { "$ref": "#/components/schemas/AddressDTO" }
        }
      },
      "AccountRegisterDTO": {
        "required": ["email", "name", "password"],
        "type": "object",
        "properties": {
          "name": { "maxLength": 20, "minLength": 5, "type": "string" },
          "email": { "type": "string" },
          "password": {
            "maxLength": 30,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.+[0-9].+)(?=.*[a-zA-Z]+.*[ ,!\\\"§$%&/()=?{}[\\\\].+]+.*[a-zA-Z]+.*).*$",
            "type": "string"
          }
        }
      },
      "LoginRequestDTO": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "password": { "type": "string" }
        }
      },
      "LoginResponseDTO": {
        "type": "object",
        "properties": { "token": { "type": "string" } }
      },
      "ChangePasswordDTO": {
        "required": ["newPassword", "oldPassword"],
        "type": "object",
        "properties": {
          "oldPassword": {
            "maxLength": 30,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.+[0-9].+)(?=.*[a-zA-Z]+.*[ ,!\\\"§$%&/()=?{}[\\\\].+]+.*[a-zA-Z]+.*).*$",
            "type": "string"
          },
          "newPassword": {
            "maxLength": 30,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.+[0-9].+)(?=.*[a-zA-Z]+.*[ ,!\\\"§$%&/()=?{}[\\\\].+]+.*[a-zA-Z]+.*).*$",
            "type": "string"
          }
        }
      },
      "ParticipatingEventDTO": {
        "required": ["address", "dateTime", "id", "name", "organizer"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "maxLength": 20, "minLength": 5, "type": "string" },
          "organizer": { "$ref": "#/components/schemas/AccountDTO" },
          "dateTime": { "type": "string", "format": "date-time" },
          "address": { "$ref": "#/components/schemas/AddressDTO" },
          "participants": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ParticipantDTO" }
          },
          "participatingStatus": { "$ref": "#/components/schemas/Status" }
        }
      },
      "AccountDeleteDTO": {
        "required": ["password"],
        "type": "object",
        "properties": {
          "password": {
            "maxLength": 30,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.+[0-9].+)(?=.*[a-zA-Z]+.*[ ,!\\\"§$%&/()=?{}[\\\\].+]+.*[a-zA-Z]+.*).*$",
            "type": "string"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": { "type": "string", "format": "date-time" },
          "message": { "type": "string" },
          "additionalInformation": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": { "type": "object" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "apiKey",
        "description": "Authenticate to the Platform with an Api Key",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}
